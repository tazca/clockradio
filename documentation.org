#+TITLE: Clockradio app
#+OPTIONS: num:nil

* Setting up development environment
Follow Flutter site's [[https://docs.flutter.dev/get-started/install][Getting Started]] section, and use maybe [[https://vscodium.com/][VSCodium]] as the IDE as it has well integrated Dart/Flutter support with a plugin.

* Clock radio

The =pubspec.yaml= for Clockradio has a font asset set for local non-CDN loading, image and sound assets, and =flutter_svg=, =media_kit=, and =shared_preferences=  dependencies added. Current =pub.dev= release of  =media_kit= [[https://github.com/media-kit/media-kit/issues/595#issuecomment-2094208809][has issues building on Fedora]] and should use =main= branch on GitHub instead.

#+transclude: [[file:pubspec.yaml]]  :src yaml

=analysis_options.yaml= has some =strong-mode= options enabled to make Dart act more sensible. =prefer_single_quotes= seem very idiomatic and avoid escaping more common double quotes.

#+transclude: [[file:analysis_options.yaml]]  :src yaml

=main.dart= initializes program controllers (and controllers then their associated services) and finally passes the controllers to the app widget itself. Location is fixed to Tampere for the present.

#+transclude: [[file:lib/main.dart]]  :src dart

=app.dart= mostly follows the basic skeleton template. The =ClockRadio=  app widget rebuilds and updates controllers whenever settings change.

#+transclude: [[file:lib/src/app.dart::Widget build]]  :src dart :end "MaterialApp"

The default dark mode theme is used. Clock faces will override this theme to achieve true blacks.

The router is as follows.

#+transclude: [[file:lib/src/app.dart::onGenerateRoute]]  :src dart

** User opens app and sees initial UI

The front page is built from =ClockView= and its child widget =clock=. To save effort per clock face, =ClockView= will catch any taps making it a universal touch interface shared by all clock faces. It will also show any introductory texts.

#+transclude: [[file:lib/src/clock/clock_view.dart]]  :src dart

=clock= was built earlier in =app.dart= via =ClockController='s =buildClock= method.

#+transclude: [[file:lib/src/clock/clock_controller.dart::buildClock]]  :src dart :end "startClock"

The default clock face is =LedClock=, set in =SettingsService=.

#+transclude: [[file:lib/src/settings/settings_service.dart::Future<ClockFace> clockFace]]  :src dart :end "updateClockFace"

=ClockController= has a timer running to update =Clock=  & call alarm each minute on the point and notify the =ListenableBuilder= in =app.dart= widget tree.

#+transclude: [[file:lib/src/clock/clock_controller.dart::startClock]]  :src dart :end "setAlarm"

=Clock= is an immutable class telling current time, location, and associated info for implementing clock faces.

#+transclude: [[file:lib/src/clock/clock.dart]]  :src dart

*** LED clock face

The LED clock face employs an array of LED segments: four 7-segment numbers, dots, and alarm elements. =_powerLedElements= encodes hours and minutes into a =Map=. Each of the elements in the =Map= references to an SVG file, to a total of 30 drivable elements (barring future AM/PM elements).

#+transclude: [[file:lib/src/clock/ledclock.dart::Map<String, bool> _powerLedElements]]  :src dart

Individual SVGs were derived from breaking apart the following artesanally drawn vector image (inspired by my now-dead clock radio).

[[file:documentation_7seg_final.svg]]

The clock face should have same physical size regardless of screen DPI. Height is 1.0" by default (3.5:1 aspect ratio -> 3.5" x 1" WxH). A media query gives us the device DPI ratio relative to the standard 96 desktop DPI, as can be seen in =LedClock='s =build= method. Same technique is used on other clock faces as well.

#+transclude: [[file:lib/src/clock/ledclock.dart::Widget build]]  :src dart :end "Map<String, bool> _powerLedElements"

*** Solar clock face

This clock face is more technical. It does not use predrawn graphics and relies on trigonometric analysis off user's location and current date.

Determining clock face size is more involved than with LED face. The optimum 2.5" height-width fits considerably less displays. =build= returns a =CustomPaint= with =SolarGraphic= inheriting =CustomPainter=.

#+transclude: [[file:lib/src/clock/solarclock.dart::Widget build]]  :src dart :thingatpt paragraph

The graphic is derived from following data.

#+transclude: [[file:lib/src/clock/solarclock.dart::const SolarGraphic]]  :src dart :thingatpt paragraph

Overriding =paint= from =CustomPainter=, we start off calculating how current time relates to UTC and to solar noon. With this calculated, we know where sun currently is in radians relative to user's zenith.

#+transclude: [[file:lib/src/clock/solarclock.dart::void paint]]  :src dart :end "Calculating"

To draw day-night separation on Earth, we need to know sun's current declination. This uses a well-known formula to approximate this. =daynightRatio= is the ratio of the distance from earth's center to day-night line and from earth's center to earth's edge. So, it varies roughly between =0.0= and =0.2=. Margins and radiuses were chosen for aesthetic purposes.

#+transclude: [[file:lib/src/clock/solarclock.dart::Sun declination uses]]  :src dart :end "The user dot we add"

Since we're dealing with elements rotating around the midpoint, rotating the canvas makes drawing much simpler vs. starting to calculate circular geometry. If alarm is set, we start off with rotate for alarm outline, =drawCircle=, and rotate for sun. Otherwise we just rotate straight for the sun.

#+transclude: [[file:lib/src/clock/solarclock.dart::alarmRadians != null]]  :src dart :end "// Sun"

Sun is drawn filled. Earth only has an outline, so we have to draw the dayside separately.

#+transclude: [[file:lib/src/clock/solarclock.dart::// Sun]]  :src dart :end "const Color daySideColor"

We start off by drawing a filled half-circle pointing towards the sun. Then we draw either a day- or night-colored half-ellipse, which covers the area from center until the day-night line according to =dayNightRatio=.

#+transclude: [[file:lib/src/clock/solarclock.dart::const Color daySideColor]]  :src dart :end "// Now, let's rotate"

Finally we rotate the canvas to its final, original position and draw user's location on Earth.

#+transclude: [[file:lib/src/clock/solarclock.dart::// Now, let's rotate]]  :src dart :end "// Although SolarGraphic"

** User swipes right to edit settings

User sees options to set alarm time, location, clock face, and OLED mode. Setting alarm uses native time-picker, and each clock face has a radioesque icon-button in horizontal list. OLED mode is a on-off switch. Setting location opens a subscreen similar to time picker but with world map + overrideable lat/long shown.

Equirectangular map SVG has 853 width, where dateline is at 829.25 -> -23.75 offset (and so Greenwich at 853/2-23.75). =onTapUp (TapUpDetails details)= gives position (tapUp happens only when no other gesture has overridden the tap).

=SettingsController= is then a caching front for =SettingsService= which is a front for =SharedPreferences=. They handle radio station URLs, clock faces, and set alarm time edited via =SettingsView= in a largely passthrough manner aside from setting some defaults.

** User swipes left to radio view

User sees the currently selected radio station in e.g. a dropdown of favorite stations. The view has an engaging way to present all radio stations available. Geoblocked stations can be filtered by telling app to go through them. A random station can be set to play whenever =RadioController.play()= is called.

** User taps to play radio

Tapping triggers =RadioController.toggle()=, which starts/stops the underlying =Player= from =media_kit= library. The library does all the heavy lifting.

#+transclude: [[file:lib/src/radio/radio_controller.dart]]  :src dart

#+transclude: [[file:lib/src/radio/radio_service.dart]]  :src dart
